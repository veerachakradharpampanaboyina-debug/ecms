// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Roles Enum
enum UserRole {
  ADMIN
  HOD
  FACULTY
  STUDENT
  PARENT
}

// Gender Enum
enum Gender {
  MALE
  FEMALE
  OTHER
}

// Payment Status Enum
enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  REFUNDED
  CANCELLED
}

// Attendance Status Enum
enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  LEAVE
}

// Grade Enum
enum Grade {
  O
  A_PLUS
  A
  B_PLUS
  B
  C
  D
  F
}

// Application Status Enum
enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  ADMITTED
}

// Base User Model with optimized indexing
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  phone         String?
  profileImage  String?
  role          UserRole
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  student       Student?
  faculty       Faculty?
  parent        Parent?
  admin         Admin?
  notifications Notification[]
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  chatRooms    ChatRoom[] @relation("ChatRoomCreator")
  chatMembers  ChatMember[]
  chatMessages ChatMessage[]
  chatReactions ChatReaction[]
  files        FileStorage[]
  fileShares   FileShare[]
  storageQuota UserStorageQuota?
  emailAccounts EmailAccount[]

  // Indexes for performance
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@map("users")
}

// Admin Model
model Admin {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

// Department Model with optimized indexing
model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  hodId       String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hod         Faculty? @relation("DepartmentHOD", fields: [hodId], references: [id])
  faculty     Faculty[]
  courses     Course[]
  subjects    Subject[]

  // Indexes for performance
  @@index([code])
  @@index([createdAt])
  @@map("departments")
}

// Course Model with optimized indexing
model Course {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  duration    Int      // in years
  description String?
  departmentId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  department  Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  students    Student[]
  subjects    Subject[]
  feeStructures FeeStructure[]
  exams       Exam[]
  timetable   TimeTable[]
  admissionApplications AdmissionApplication[]

  // Indexes for performance
  @@index([code])
  @@index([departmentId])
  @@index([duration])
  @@index([createdAt])
  @@map("courses")
}

// Faculty Model with optimized indexing
model Faculty {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  employeeId   String   @unique
  departmentId String
  designation  String
  qualification String?
  experience   Int?     // in years
  joiningDate  DateTime
  isHOD        Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  subjects     Subject[] @relation("FacultySubjects")
  attendance   Attendance[]
  assignments  Assignment[]
  studyMaterials StudyMaterial[]
  internalMarks InternalMark[]
  leaves       Leave[]
  hodDepartment Department? @relation("DepartmentHOD")
  timetable    TimeTable[]

  // Indexes for performance
  @@index([employeeId])
  @@index([departmentId])
  @@index([designation])
  @@index([isHOD])
  @@index([joiningDate])
  @@index([createdAt])
  @@map("faculty")
}

// Student Model with optimized indexing
model Student {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rollNumber    String   @unique
  admissionNo   String   @unique
  courseId      String
  semester      Int
  batch         String
  dateOfBirth   DateTime
  gender        Gender
  bloodGroup    String?
  address       String?
  city          String?
  state         String?
  country       String?
  pincode       String?
  parentName    String?
  parentPhone   String?
  parentEmail   String?
  admissionDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  course        Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  attendance    Attendance[]
  fees          Fee[]
  assignments   AssignmentSubmission[]
  internalMarks InternalMark[]
  examResults   ExamResult[]
  certificates  CertificateRequest[]
  parent        Parent?

  // Indexes for performance
  @@index([rollNumber])
  @@index([admissionNo])
  @@index([courseId])
  @@index([semester])
  @@index([batch])
  @@index([gender])
  @@index([admissionDate])
  @@index([createdAt])
  @@map("students")
}

// Parent Model
model Parent {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentId  String   @unique
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  occupation String?
  income     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("parents")
}

// Subject Model with optimized indexing
model Subject {
  id           String   @id @default(cuid())
  name         String
  code         String   @unique
  courseId     String
  departmentId String
  semester     Int
  credits      Int
  description  String?
  facultyId    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  faculty      Faculty? @relation("FacultySubjects", fields: [facultyId], references: [id])
  attendance   Attendance[]
  assignments  Assignment[]
  studyMaterials StudyMaterial[]
  internalMarks InternalMark[]
  examResults  ExamResult[]
  timetable    TimeTable[]

  // Indexes for performance
  @@index([code])
  @@index([courseId])
  @@index([departmentId])
  @@index([semester])
  @@index([facultyId])
  @@index([credits])
  @@index([createdAt])
  @@map("subjects")
}

// Attendance Model with optimized indexing
model Attendance {
  id        String           @id @default(cuid())
  studentId String
  subjectId String
  facultyId String
  date      DateTime
  status    AttendanceStatus
  remarks   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  faculty   Faculty  @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@unique([studentId, subjectId, date])
  @@index([studentId])
  @@index([subjectId])
  @@index([facultyId])
  @@index([date])
  @@index([status])
  @@map("attendance")
}

// Fee Structure Model
model FeeStructure {
  id          String   @id @default(cuid())
  name        String
  amount      Float
  courseId    String
  semester    Int?
  academicYear String
  dueDate     DateTime
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  fees        Fee[]

  @@map("fee_structures")
}

// Fee Model with optimized indexing
model Fee {
  id             String        @id @default(cuid())
  studentId      String
  feeStructureId String
  amount         Float
  paidAmount     Float         @default(0)
  status         PaymentStatus @default(PENDING)
  paymentMethod  String?       // ONLINE, CASH, BANK_TRANSFER
  transactionId  String?
  receiptNumber  String?
  dueDate        DateTime
  paidAt         DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  student        Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  feeStructure   FeeStructure  @relation(fields: [feeStructureId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([studentId])
  @@index([feeStructureId])
  @@index([status])
  @@index([dueDate])
  @@index([paidAt])
  @@index([paymentMethod])
  @@map("fees")
}

// Assignment Model with optimized indexing
model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  subjectId   String
  facultyId   String
  dueDate     DateTime
  totalMarks  Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject     Subject              @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  faculty     Faculty              @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]

  // Indexes for performance
  @@index([subjectId])
  @@index([facultyId])
  @@index([dueDate])
  @@index([isActive])
  @@index([createdAt])
  @@map("assignments")
}

// Assignment Submission Model
model AssignmentSubmission {
  id           String   @id @default(cuid())
  assignmentId String
  studentId    String
  submission   String?  // file path or URL
  textContent  String?
  marks        Int?
  remarks      String?
  submittedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

// Study Material Model
model StudyMaterial {
  id          String   @id @default(cuid())
  title       String
  description String?
  subjectId   String
  facultyId   String
  fileUrl     String
  fileType    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject     Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  faculty     Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  @@map("study_materials")
}

// Internal Mark Model
model InternalMark {
  id        String   @id @default(cuid())
  studentId String
  subjectId String
  facultyId String
  examType  String   // INTERNAL1, INTERNAL2, ASSIGNMENT, etc.
  marks     Int
  maxMarks  Int
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  faculty   Faculty  @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  @@unique([studentId, subjectId, examType])
  @@map("internal_marks")
}

// Exam Model
model Exam {
  id          String   @id @default(cuid())
  name        String
  examType    String   // MIDTERM, ENDTERM, PRACTICAL
  courseId    String
  semester    Int
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  results     ExamResult[]

  @@map("exams")
}

// Exam Result Model
model ExamResult {
  id        String   @id @default(cuid())
  examId    String
  studentId String
  subjectId String
  marks     Int
  maxMarks  Int
  grade     Grade?
  gpa       Float?
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  exam      Exam    @relation(fields: [examId], references: [id], onDelete: Cascade)
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([examId, studentId, subjectId])
  @@map("exam_results")
}

// Time Table Model
model TimeTable {
  id          String   @id @default(cuid())
  subjectId   String
  facultyId   String
  courseId    String
  semester    Int
  dayOfWeek   Int      // 1-7 (Monday-Sunday)
  startTime   DateTime
  endTime     DateTime
  roomNumber  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject     Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  faculty     Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("timetable")
}

// Notification Model with optimized indexing
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   // INFO, WARNING, SUCCESS, ERROR
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// Message Model with optimized indexing
model Message {
  id        String   @id @default(cuid())
  senderId  String
  receiverId String
  subject   String?
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
  @@index([createdAt])
  @@map("messages")
}

// Leave Model with optimized indexing
model Leave {
  id          String   @id @default(cuid())
  facultyId   String
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  approvedBy  String?
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  faculty     Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([facultyId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([createdAt])
  @@map("leaves")
}

// Certificate Request Model with optimized indexing
model CertificateRequest {
  id          String   @id @default(cuid())
  studentId   String
  type        String   // BONAFIDE, TRANSFER, CONDUCT, etc.
  reason      String?
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED, ISSUED
  issuedAt    DateTime?
  fileUrl     String?
  remarks     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  student     Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([studentId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("certificate_requests")
}

// Admission Application Model with optimized indexing
model AdmissionApplication {
  id          String            @id @default(cuid())
  firstName   String
  lastName    String
  email       String            @unique
  phone       String
  dateOfBirth DateTime
  gender      Gender
  address     String
  city        String
  state       String
  pincode     String
  courseId    String
  tenthMarks  Float
  twelfthMarks Float
  status      ApplicationStatus @default(SUBMITTED)
  documents   String?           // JSON array of document URLs
  remarks     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([email])
  @@index([courseId])
  @@index([status])
  @@index([gender])
  @@index([city])
  @@index([state])
  @@index([createdAt])
  @@map("admission_applications")
}

// Rate Limit Model with optimized indexing
model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(1)
  resetTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([resetTime])
  @@index([createdAt])
  @@map("rate_limits")
}

// Email Account Model with optimized indexing
model EmailAccount {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailDomainId String?
  emailDomain   EmailDomain? @relation(fields: [emailDomainId], references: [id])
  email         String   @unique
  password      String
  quota         Int      @default(104857600) // 100MB default quota in bytes
  usedSpace     Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  emails        Email[]

  // Indexes for performance
  @@index([userId])
  @@index([isActive])
  @@index([createdAt])
  @@map("email_accounts")
}

// Email Model with optimized indexing
model Email {
  id          String   @id @default(cuid())
  accountId   String
  account     EmailAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  from        String
  to          String
  cc          String?
  bcc         String?
  subject     String
  body        String
  htmlBody    String?
  attachments String?  // JSON array of attachment URLs
  isRead      Boolean  @default(false)
  isStarred   Boolean  @default(false)
  isImportant Boolean  @default(false)
  folder      String   @default("inbox") // inbox, sent, drafts, spam, trash
  size        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Indexes for performance
  @@index([accountId])
  @@index([from])
  @@index([to])
  @@index([folder])
  @@index([isRead])
  @@index([isStarred])
  @@index([isImportant])
  @@index([createdAt])
  @@map("emails")
}

// Email Domain Model
model EmailDomain {
  id          String   @id @default(cuid())
  domain      String   @unique
  description String?
  isActive    Boolean  @default(true)
  maxAccounts Int      @default(10000)
  usedAccounts Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  accounts    EmailAccount[]

  @@map("email_domains")
}

// Email Template Model
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  body        String
  htmlBody    String?
  category    String   // NOTIFICATION, ANNOUNCEMENT, ACADEMIC, ADMINISTRATIVE
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

// Chat Room Model with optimized indexing
model ChatRoom {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("group") // group, direct, course, department
  isPrivate   Boolean  @default(false)
  maxMembers  Int      @default(100)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User     @relation("ChatRoomCreator", fields: [createdBy], references: [id])
  members     ChatMember[]
  messages    ChatMessage[]

  // Indexes for performance
  @@index([type])
  @@index([isPrivate])
  @@index([createdBy])
  @@index([createdAt])
  @@map("chat_rooms")
}

// Chat Member Model with optimized indexing
model ChatMember {
  id          String   @id @default(cuid())
  roomId      String
  userId      String
  role        String   @default("member") // admin, moderator, member
  joinedAt    DateTime @default(now())
  lastReadAt  DateTime?
  isActive    Boolean  @default(true)

  // Relations
  room        ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@unique([roomId, userId])
  @@index([userId])
  @@index([role])
  @@index([isActive])
  @@index([joinedAt])
  @@map("chat_members")
}

// Chat Message Model with optimized indexing
model ChatMessage {
  id          String   @id @default(cuid())
  roomId      String
  senderId    String
  content     String
  messageType String   @default("text") // text, image, file, system
  fileUrl     String?
  fileName    String?
  fileSize    Int?
  replyToId   String?
  isEdited    Boolean  @default(false)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  room        ChatRoom    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender      User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  replyTo     ChatMessage? @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     ChatMessage[] @relation("MessageReplies")
  reactions   ChatReaction[]

  // Indexes for performance
  @@index([roomId])
  @@index([senderId])
  @@index([messageType])
  @@index([createdAt])
  @@index([isEdited])
  @@index([isDeleted])
  @@map("chat_messages")
}

// Chat Reaction Model with optimized indexing
model ChatReaction {
  id          String   @id @default(cuid())
  messageId   String
  userId      String
  emoji       String
  createdAt   DateTime @default(now())

  // Relations
  message     ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
  @@index([createdAt])
  @@map("chat_reactions")
}

// File Storage Model with optimized indexing
model FileStorage {
  id          String   @id @default(cuid())
  userId      String
  fileName    String
  originalName String
  filePath    String
  fileSize    Int
  mimeType    String
  category    String   @default("general") // general, academic, assignment, project, certificate
  isPublic    Boolean  @default(false)
  isShared    Boolean  @default(false)
  downloadCount Int    @default(0)
  description String?
  tags        String?  // JSON array of tags
  metadata    String?  // JSON object for additional metadata
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shares      FileShare[]

  // Indexes for performance
  @@index([userId])
  @@index([category])
  @@index([isPublic])
  @@index([isShared])
  @@index([mimeType])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("file_storage")
}

// File Share Model with optimized indexing
model FileShare {
  id          String   @id @default(cuid())
  fileId      String
  userId      String   // Who shared the file
  sharedWith  String?  // User ID if shared with specific user
  sharedType  String   @default("link") // link, user, group
  permission  String   @default("view") // view, download, edit
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  file        FileStorage @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([fileId])
  @@index([userId])
  @@index([sharedWith])
  @@index([sharedType])
  @@index([permission])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("file_shares")
}

// User Storage Quota Model
model UserStorageQuota {
  id          String   @id @default(cuid())
  userId      String   @unique
  maxStorage  Int      @default(5368709120) // 5GB default
  usedStorage Int      @default(0)
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_storage_quotas")
}